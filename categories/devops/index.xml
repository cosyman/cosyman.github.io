<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on 技术&amp;生活</title>
    <link>http://cosyman.github.io/categories/devops/</link>
    <description>Recent content in Devops on 技术&amp;生活</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Jan 2015 22:26:00 +0800</lastBuildDate>
    <atom:link href="http://cosyman.github.io/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Page Object Pattern</title>
      <link>http://cosyman.github.io/blog/2015/01/29/page-object-pattern/</link>
      <pubDate>Thu, 29 Jan 2015 22:26:00 +0800</pubDate>
      
      <guid>http://cosyman.github.io/blog/2015/01/29/page-object-pattern/</guid>
      <description>

&lt;p&gt;移动UI自动化，看起来美好，践行起来却难。做个目光短见的务实主义者。Page Objects Pattern是Selenium官方推崇的方式，最近研究写测试用例最佳实践之Page Objects，同时结合Appium的Java Client简单介绍下如何写出靠谱的Page Object。&lt;/p&gt;

&lt;h2 id=&#34;page-objects:7dbf58256fe9adba2caee2327d472e2f&#34;&gt;Page Objects&lt;/h2&gt;

&lt;p&gt;Page Object定义为抽象web app页面的一系列对象，通过对页面功能的封装，它得到了很多好处：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;减少重复代码&lt;/li&gt;
&lt;li&gt;提高测试代码的可读性和稳定性&lt;/li&gt;
&lt;li&gt;测试代码易于维护&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;一个简单的例子:7dbf58256fe9adba2caee2327d472e2f&#34;&gt;一个简单的例子&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class BaiduSearchPage {

	protected WebDriver driver;
        @FindBy(id=&amp;quot;kw&amp;quot;)
	private WebElement kw;
	private WebElement su;

	public BaiduSearchPage(WebDriver driver) {
		super();
		this.driver = driver;
                PageFactory.initElements(driver, this);
	}

	public void load(String url) {
		driver.get(url);
	}

	public ResultPage search(String key) {
		kw.clear();
		kw.sendKeys(key);
		su.click();
		return new ResultPage(driver);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;推荐的做法:7dbf58256fe9adba2caee2327d472e2f&#34;&gt;推荐的做法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;public 方法暴露Page对象的服务&lt;/li&gt;
&lt;li&gt;WebElement,Driver相关页面UI细节尽可能隐藏&lt;/li&gt;
&lt;li&gt;尽量减少Page对象中的Assertion&lt;/li&gt;
&lt;li&gt;到达新的Page，在方法中返回其它Page,甚至同一页面也可以返回Page做链式操作&lt;/li&gt;
&lt;li&gt;一个Page对象不需要关注所有细节，只关心需要的对象，需要时再补充&lt;/li&gt;
&lt;li&gt;不同的结果，同一个操作可以用不同的方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;appium-中使用page-object-pattern:7dbf58256fe9adba2caee2327d472e2f&#34;&gt;Appium 中使用Page Object Pattern&lt;/h2&gt;

&lt;p&gt;Appium的Java Client是基于WebDriver的，但有了一些改进。比如元素定位不到，Appium Java Client会将Locator详细信息抛出，而Selenium没有。&lt;/p&gt;

&lt;h2 id=&#34;wait:7dbf58256fe9adba2caee2327d472e2f&#34;&gt;Wait&lt;/h2&gt;

&lt;p&gt;移动自动化测试Wait是很关键的一个动作，既关乎正确性，也关乎效率，我们应该极力避免使用Thread.sleep()或Sleeper.sleepTight()。Appium的客户端提供了一个类AppiumFieldDecorator可以很方便的设置ImplicitlyWaitTimeOut。FieldDecorator顾名思义，是Page对象Field的Decorator，PageFactory主要就是在Feild上下功夫，将WebElement类型的Feild使用Proxy方法，创建一个增强的WebElement,这个成员在每次操作时，都会先使用注解的定位策略定位，然后再调用WebElement的方法，当然可以通过CacheLookup注解，来缓存定位结果（尽量不这么做)。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PageFactory.initElements(new AppiumFieldDecorator(driver, 5, TimeUnit.SECONDS), pageObject);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果等待某个页面元素是否可见，在PageObject中也更简单&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void untilElementVisable(final WebElement element,int timeoutInSeconds){
  new Wait() {
     @Override
     public boolean until() {
	return element.isDisplayed();
     }
   }.wait(String.format(&amp;quot;Timed out waiting for %s. Waited %s&amp;quot;,
		  element, timeoutInSeconds), timeoutInSeconds);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;findby:7dbf58256fe9adba2caee2327d472e2f&#34;&gt;FindBy&lt;/h2&gt;

&lt;p&gt;在Appium中你会遇到，Selendroid模式和UIAutomator定位差异，比如Selendroid的linkText在UIAutomator中用name,还有就是iOS脚本想和Android共用一份。这在Appium中有了很好的扩充，Appium客户端会在运行时决定使用哪个Annotation来装饰WebElement。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    @FindBy(name=&amp;quot;text&amp;quot;)
    @SelendroidFindBy(name = &amp;quot;text1&amp;quot;)
    @iOSFindBy(id=&amp;quot;sth&amp;quot;)
    private WebElement textSelendroid;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;elementinterceptor:7dbf58256fe9adba2caee2327d472e2f&#34;&gt;ElementInterceptor&lt;/h2&gt;

&lt;p&gt;总是有这样或那样的原因，需要记录日志，如果方法的执行每一步都要手写是很痛苦的，自然我们想到了AOP。在Selenium中EventFiringWebDriver类可以方便的记录日志，但是在Appium客户端中，我们可以修改AppiumFieldDecorator中ElementInterceptor来加入自己的日志信息，不过暂时这个功能Appium Client没有暴露出来，需要自己fork个repo修改下。&lt;/p&gt;

&lt;h2 id=&#34;参考:7dbf58256fe9adba2caee2327d472e2f&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://assertselenium.com/automation-design-practices/page-object-pattern/&#34;&gt;http://assertselenium.com/automation-design-practices/page-object-pattern/&lt;/a&gt;
&lt;a href=&#34;https://code.google.com/p/selenium/wiki/LoadableComponent&#34;&gt;https://code.google.com/p/selenium/wiki/LoadableComponent&lt;/a&gt;
&lt;a href=&#34;https://code.google.com/p/selenium/wiki/PageObjects&#34;&gt;https://code.google.com/p/selenium/wiki/PageObjects&lt;/a&gt;
&lt;a href=&#34;https://code.google.com/p/selenium/wiki/PageFactory&#34;&gt;https://code.google.com/p/selenium/wiki/PageFactory&lt;/a&gt;
&lt;a href=&#34;https://github.com/FluentLenium/FluentLenium&#34;&gt;https://github.com/FluentLenium/FluentLenium&lt;/a&gt;
&lt;a href=&#34;https://github.com/countableSet/webdriver-demo&#34;&gt;https://github.com/countableSet/webdriver-demo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>