<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on 兰天</title>
    <link>http://cosyman.github.io/categories/devops/index.xml</link>
    <description>Recent content in Devops on 兰天</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>cosyman@outlook.com (兰天)</managingEditor>
    <webMaster>cosyman@outlook.com (兰天)</webMaster>
    <atom:link href="http://cosyman.github.io/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>15年在Ctrip技术上的一点收获</title>
      <link>http://cosyman.github.io/blog/2015/12/15%E5%B9%B4%E5%9C%A8ctrip%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E4%B8%80%E7%82%B9%E6%94%B6%E8%8E%B7/</link>
      <pubDate>Fri, 11 Dec 2015 23:09:02 +0800</pubDate>
      <author>cosyman@outlook.com (兰天)</author>
      <guid>http://cosyman.github.io/blog/2015/12/15%E5%B9%B4%E5%9C%A8ctrip%E6%8A%80%E6%9C%AF%E4%B8%8A%E7%9A%84%E4%B8%80%E7%82%B9%E6%94%B6%E8%8E%B7/</guid>
      <description>&lt;h2 id=&#34;自动化测试&#34;&gt;自动化测试&lt;/h2&gt;

&lt;p&gt;上半年参与Ctrip移动UI自动化框架的开发，原始代码是从ebay借鉴的，对于Ctrip太过复杂，我删减掉很多。这也是首次工作之中开发框架，感觉还是很好的，只是之前的工作一直注重敏捷，唯快不破，而做框架是很难快起来的，要熟悉用户的习惯，相应领域知识，并熟知相关技术，还要能预测短时间内的变化。那段时间内通读了TestNG、HttpCore、FreeMarker、Selenium、Appium、ddmlib等源码及Http权威指南/RFC文档，JSONWP等协议，也看了些Android系统相关的书籍，试图去了解所做的领域，总的来说是幸福的。阅读源码也更快了，多看，多试。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;testng&#34;&gt;TestNG&lt;/h3&gt;

&lt;p&gt;TestNG,通常基于它做扩展而已，主要通过实现TestNG的Listener来完成Case调度的管理及运行结果报表的定制。TestNG的核心在于实现一个正确并高效的Case调度执行器，我们的扩展代码将被Hook到TestNG的这个Task Graph中。&lt;/p&gt;

&lt;h3 id=&#34;api自动化&#34;&gt;API自动化&lt;/h3&gt;

&lt;p&gt;API,Http权威指南，RFC文档&lt;/p&gt;

&lt;h3 id=&#34;ui自动化&#34;&gt;UI自动化&lt;/h3&gt;

&lt;p&gt;UI测试除了快速按步骤写脚本，Page Object Pattern是其精髓，虽然模式通常让工程师变得刻板懒惰，但的确可以更简单快速的解决问题。Page Object本身就是对UI世界很好的抽象，而UI元素被抽象为Page Object的属性，通过Annotation/Attribuite，动态生成这些UI元素的Locator代理。抽象意味着与特定实物分离，自然就可以一套代码，相近业务达到跨平台，脚本的维护也更遵循人的思维方式&lt;/p&gt;

&lt;h2 id=&#34;构建&#34;&gt;构建&lt;/h2&gt;

&lt;p&gt;5月份左右，部门人员动荡太大，被派到Build组做支持，确切的讲，一个组走光了，我去做TS，压力相当的大，前3个月，人真是有点废了的感觉，也没有太多的学习了，后来慢慢好点的时候，也只好看Build相关的知识了。&lt;/p&gt;

&lt;p&gt;在构建领域无一平台或语种可以像Java那样完整（不服来辩）。从灵活强大的Ant工具到约定胜于配置的标准化构建生命周期Maven，再到极具表达力（DSL）幸福构建的Gradle,足足进化了15年。当然另外一个更为庞大的Node平台火速发展也不过近3~5年。&lt;/p&gt;

&lt;p&gt;优秀的工程师总是少的，就如同构建的价值难以被重视，构建工具在为开源的便捷化也作出了巨大贡献，提供了生产与消费组件的平台。构建通常需要解决依赖关系，计算输出，重要的是一个正确高效的TaskGraph执行引擎。&lt;/p&gt;

&lt;h2 id=&#34;rock-the-world&#34;&gt;Rock the World&lt;/h2&gt;

&lt;p&gt;去eBay的测试meeting时，看到茌成的PPT上Performance is a Faith点亮了我，很多时候我会怀疑努力写好代码的价值，满足需求的情况下，把代码写好，并不需要解释。也正是这种信仰坚持去关注用户的根本需求，提高用户体验，抓住技术的本质，才能真正的Rock the World！&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Build系统介绍</title>
      <link>http://cosyman.github.io/blog/2015/05/build%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0800</pubDate>
      <author>cosyman@outlook.com (兰天)</author>
      <guid>http://cosyman.github.io/blog/2015/05/build%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;好的IDE做Build工具的Wrapper，Build平台也应只做Build工具的Wrapper，大量散乱的Build脚本应被组织起来，演变为Build工具&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;10000公里俯瞰build&#34;&gt;10000公里俯瞰Build&lt;/h2&gt;

&lt;p&gt;Build体系中包括Build平台，Build工具，Build脚本。大量散乱的Build脚本，只会导致各种Build工程师的产生，它应进化为一种Build工具。Build平台应该最大力度的发挥Build工具的能力，至于Build脚本，交给用户(开发者)吧，只有他们有责任和欲望演进构建脚本代码，我们应致力于Build平台体验和构建工具的引入与研发。&lt;/p&gt;

&lt;p&gt;当代Build平台,它应该能提供规范统一，集中的构建分享舞台，加快构建的生产与消费。&lt;/p&gt;

&lt;p&gt;Build工具本质上，是对文件的处理，加工，构建出目标容器可以运行的软件。构建的过程就是输入，输出，处理的有向无环图。Build工具的优化，就是对这个有向无环图的优化，单个节点处理，多个节点输入输出的缓存/增量处理，图流向的优化，并行处理等。&lt;/p&gt;

&lt;p&gt;Build脚本，自然就是对输入，输出，处理的描述，从一开始用文本，xml，再到DSL，到代码，是工程师对Build脚本认知的成熟体现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cosyman/cosyman-hugo/master/static/images/devops/deg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;scm&#34;&gt;SCM&lt;/h2&gt;

&lt;p&gt;Build的原材料来自VCS，但它依赖的中间产物，产生的中间产物，不应该被上传至VCS。Build脚本应视作代码。&lt;/p&gt;

&lt;h2 id=&#34;configuration-manager-system&#34;&gt;Configuration Manager System&lt;/h2&gt;

&lt;p&gt;虽然仅仅是flavor，可以抽象为独立的服务，并且最好抽象为独立的服务&lt;/p&gt;

&lt;h2 id=&#34;profile&#34;&gt;Profile&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;平台的独立性&lt;/li&gt;
&lt;li&gt;不同的调料,当发现api传递很多参数时，应该考虑这些参数是否需要暴露，然后分组，只暴露profile。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;script-dsl&#34;&gt;Script/DSL&lt;/h2&gt;

&lt;p&gt;DSL是通用语言发展到一定阶段的必然产物，Build DSL的产生意味着Build工具的描述能力不再受限制&lt;/p&gt;

&lt;h2 id=&#34;repository&#34;&gt;Repository&lt;/h2&gt;

&lt;p&gt;提供了构建消费者和提供者的舞台，这也是一个平台繁荣的必要条件。它利于模块化的实践，在facebook专门开发工具，鼓励代码小模块的实践，加速构建速度。&lt;/p&gt;

&lt;p&gt;仓库管理的中心化，布局的标准化，让开发者专注于构建的使用和集成&lt;/p&gt;

&lt;p&gt;结合git的tag管理，充分利用scm和代码密切联系，可以减少二次存放&lt;/p&gt;

&lt;p&gt;本地缓存，局域网代理，缓存，高可用。&lt;/p&gt;

&lt;p&gt;生产构建的格式应该与行业标准可适配，否则就意味着自造车轮，至少是封闭的，不利于引入第三方构建，是与开源的对抗&lt;/p&gt;

&lt;h2 id=&#34;artifact&#34;&gt;Artifact&lt;/h2&gt;

&lt;h3 id=&#34;version&#34;&gt;Version&lt;/h3&gt;

&lt;p&gt;具体参考sem。&lt;/p&gt;

&lt;p&gt;通常在集成初期为了开发方便，可以设置一种Time Changing版本，每次构建都会获取最新的版本，显然它应该限制在生产环境，在maven中体现为Snapshot机制&lt;/p&gt;

&lt;p&gt;在集成趋于稳定时，可以用Dynamic Changing版本，并最终到Final版本&lt;/p&gt;

&lt;p&gt;版本应该直接体现在构建的文件名字当中，避免不必要的错误。&lt;/p&gt;

&lt;h3 id=&#34;依赖&#34;&gt;依赖&lt;/h3&gt;

&lt;p&gt;没有依赖的项目，通常是没什么用的，Martin Fowler如是说。&lt;/p&gt;

&lt;p&gt;大型的互联网系统，依赖图也将非常复杂，它至少支持，依赖传递与中断或排除，以及版本冲突的选择策略定制。&lt;/p&gt;

&lt;h2 id=&#34;lifecycle&#34;&gt;Lifecycle&lt;/h2&gt;

&lt;p&gt;生命周期的定义，意味着某种构建的抽象可能性，尤其对于DotNet，Java等平台，构建本身是一种标准，比如Java中war，ear等，它可以帮助把约定胜于配置的理念发挥到极致，同时Lifecycle也通常意味着不变，对于灵活性要求极高的构建，则需要更强大的DSL来帮忙。&lt;/p&gt;

&lt;p&gt;构建任务合理的组织，文件夹结构分类明确，自包含。&lt;/p&gt;

&lt;h2 id=&#34;task-graph-goal&#34;&gt;Task Graph/Goal&lt;/h2&gt;

&lt;p&gt;对于构建有向无环图的抽象，可以看成Gradle中的TaskGraph，在Maven中则对应为Lifecycle和Goal。&lt;/p&gt;

&lt;p&gt;Build系统引擎的优化，则是这TaskGraph的优化。调度系统如此，试框架TestNG也是如此。&lt;/p&gt;

&lt;h2 id=&#34;best-practices&#34;&gt;Best Practices&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Build Script 由开发维护，作为代码的一部分。&lt;/li&gt;
&lt;li&gt;一致性，本地，server端的构建行为要一致，可以方便验证。&lt;/li&gt;
&lt;li&gt;关注点分离，self-contained的完整的输入输出及处理周期。&lt;/li&gt;
&lt;li&gt;根本上关注构建体验，分而治之。&lt;/li&gt;
&lt;li&gt;引入构建仓库。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;cbuilder-s-anti-pattern&#34;&gt;Cbuilder&amp;rsquo;s Anti Pattern&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;SCM项目源码依赖&amp;ndash;&amp;gt;SCM目录依赖&amp;ndash;&amp;gt;SCM文件依赖 中间仓库，源码依赖意味着依赖的交付为源码，JDK的开发中比如jshell，http2&lt;/li&gt;
&lt;li&gt;BuildScript过重，没有转给开发，Build Engineer的出现&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;develop-build-tool&#34;&gt;Develop Build Tool&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Build 是严肃的，稳定&lt;/li&gt;
&lt;li&gt;Build 应该被合理的组织&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_software_package_management_systems&#34;&gt;https://en.wikipedia.org/wiki/List_of_software_package_management_systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.virginia.edu/~dww4s/articles/build_systems.html&#34;&gt;Overview of  Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.open-open.com/doc/view/4058453cde4b429c82ff2807d8aa81f0&#34;&gt;淘宝Maven培训&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://devops.com/2014/07/29/continuous-delivery-pipeline/&#34;&gt;http://devops.com/2014/07/29/continuous-delivery-pipeline/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://semver.org&#34;&gt;版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/presentations/cd-gradle-jenkins&#34;&gt;http://www.infoq.com/presentations/cd-gradle-jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.nuget.org/20150729/Introducing-nuget-uwp.html&#34;&gt;NuGet Package Name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/refcardz/designing-quality-software&#34;&gt;Dependency Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/refcardz/getting-started-repository&#34;&gt;Repository Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Page Object Pattern</title>
      <link>http://cosyman.github.io/blog/2015/01/page-object-pattern/</link>
      <pubDate>Thu, 29 Jan 2015 22:26:00 +0800</pubDate>
      <author>cosyman@outlook.com (兰天)</author>
      <guid>http://cosyman.github.io/blog/2015/01/page-object-pattern/</guid>
      <description>&lt;p&gt;移动UI自动化，看起来美好，践行起来却难。做个目光短见的实主义者。Page Objects Pattern是Selenium官方推崇的方式，最近研究写测试用例最佳实践之Page Objects，同时结合Appium的Java Client简单介绍下如何写出靠谱的Page Object。&lt;/p&gt;

&lt;p&gt;Page Object定义为抽象web app页面的一系列对象，通过对UI界面的抽象，它拥有很多好处：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;减少重复代码&lt;/li&gt;
&lt;li&gt;提高测试代码的可读性和稳定性&lt;/li&gt;
&lt;li&gt;测试代码易于维护&lt;/li&gt;
&lt;li&gt;UI元素的定位和具体实现分离，如Android，iOS的一套脚本实现
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;一个简单的例子&#34;&gt;一个简单的例子&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class BaiduSearchPage {

	protected WebDriver driver;
	@FindBy(id=&amp;quot;kw&amp;quot;)
	private WebElement kw;
	private WebElement su;

	public BaiduSearchPage(WebDriver driver) {
		super();
		this.driver = driver;
    PageFactory.initElements(driver, this);
	}
	public void load(String url) {
		driver.get(url);
	}
	public ResultPage search(String key) {
		kw.clear();
		kw.sendKeys(key);
		su.click();
		return new ResultPage(driver);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;推荐的做法&#34;&gt;推荐的做法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;public方法暴露Page对象的服务&lt;/li&gt;
&lt;li&gt;WebElement,Driver相关页面UI细节尽可能隐藏&lt;/li&gt;
&lt;li&gt;尽量减少Page对象中的Assertion&lt;/li&gt;
&lt;li&gt;在方法中返回新的Page,甚至在同一页面也可以返回Page做链式操作&lt;/li&gt;
&lt;li&gt;一个Page对象不需要关注所有细节，只关心需要的UI元素，需要时再补充&lt;/li&gt;
&lt;li&gt;不同的结果，同一个操作可以用不同的方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;appium-中使用page-object-pattern&#34;&gt;Appium 中使用Page Object Pattern&lt;/h2&gt;

&lt;p&gt;Appium的Java Client是基于WebDriver的，但有了一些改进。比如元素定位不到时，它会将Locator详细信息抛出，而Selenium没有。&lt;/p&gt;

&lt;h2 id=&#34;wait&#34;&gt;Wait&lt;/h2&gt;

&lt;p&gt;移动自动化测试Wait是很关键的一个动作，既关乎正确性，也关乎效率，我们应该极力避免使用Thread.sleep()或Sleeper.sleepTight()。Appium的客户端提供了一个类AppiumFieldDecorator可以很方便的设置ImplicitlyWaitTimeOut。FieldDecorator顾名思义，是Page对象Field的Decorator，PageObject的精髓就是在Feild上下功夫，将WebElement类型的Feild动态Proxy为一个增强的WebElement,这个成员在每次操作时，都会先使用注解的定位策略定位，然后再调用WebElement的方法，当然可以通过CacheLookup注解，来缓存定位结果。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;PageFactory.initElements(new AppiumFieldDecorator(driver, 5, TimeUnit.SECONDS), pageObject);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果等待某个页面元素是否可见，在PageObject中也更简单&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void untilElementVisable(final WebElement element,int timeoutInSeconds){
  new Wait() {
     @Override
     public boolean until() {
		return element.isDisplayed();
     }
   }.wait(String.format(&amp;quot;Timed out waiting for %s. Waited %s&amp;quot;,
		  element, timeoutInSeconds), timeoutInSeconds);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;findby&#34;&gt;FindBy&lt;/h2&gt;

&lt;p&gt;在Appium中你会遇到，Selendroid模式和UIAutomator定位差异，比如Selendroid的linkText在UIAutomator中用name,还有就是iOS脚本想和Android共用一份。这在Appium中有了很好的扩充，Appium客户端会在运行时决定使用哪个Annotation来装饰WebElement。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@FindBy(name=&amp;quot;text&amp;quot;)
@SelendroidFindBy(name = &amp;quot;text1&amp;quot;)
@iOSFindBy(id=&amp;quot;sth&amp;quot;)
private WebElement textSelendroid;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;elementinterceptor&#34;&gt;ElementInterceptor&lt;/h2&gt;

&lt;p&gt;总是有这样或那样的原因，需要记录日志，如果方法的执行每一步都要手写是很痛苦的，自然我们想到了AOP。在Selenium中EventFiringWebDriver类可以方便的记录日志，但是在Appium客户端中，我们可以修改AppiumFieldDecorator中ElementInterceptor来加入自己的日志信息，不过暂时这个功能Appium Client没有暴露出来，需要自己fork个repo修改下。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://assertselenium.com/automation-design-practices/page-object-pattern&#34;&gt;http://assertselenium.com/automation-design-practices/page-object-pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/selenium/wiki/LoadableComponent&#34;&gt;https://code.google.com/p/selenium/wiki/LoadableComponent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/selenium/wiki/PageObjects&#34;&gt;https://code.google.com/p/selenium/wiki/PageObjects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/selenium/wiki/PageFactory&#34;&gt;https://code.google.com/p/selenium/wiki/PageFactory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/FluentLenium/FluentLenium&#34;&gt;https://github.com/FluentLenium/FluentLenium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/countableSet/webdriver-demo&#34;&gt;https://github.com/countableSet/webdriver-demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>